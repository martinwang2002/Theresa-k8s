#  We need to get RBAC permissions first with
#  Kubectl create clusterrolebinding cluster-admin-binding \
#    --clusterrole cluster-admin --user `gcloud config list --format 'value(core.account)'`

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeip
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeip
  template:
    metadata:
      labels:
        app: kubeip
    spec:
      containers:
        - env:
            - name: KUBEIP_LABELKEY
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_LABELKEY
                  name: kubeip-config
            - name: KUBEIP_LABELVALUE
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_LABELVALUE
                  name: kubeip-config
            - name: KUBEIP_NODEPOOL
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_NODEPOOL
                  name: kubeip-config
            - name: KUBEIP_FORCEASSIGNMENT
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_FORCEASSIGNMENT
                  name: kubeip-config
            - name: KUBEIP_ORDERBYLABELKEY
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_ORDERBYLABELKEY
                  name: kubeip-config
            - name: KUBEIP_ORDERBYDESC
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_ORDERBYDESC
                  name: kubeip-config
            - name: KUBEIP_ADDITIONALNODEPOOLS
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_ADDITIONALNODEPOOLS
                  name: kubeip-config
            - name: KUBEIP_COPYLABELS
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_COPYLABELS
                  name: kubeip-config
            - name: KUBEIP_CLEARLABELS
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_CLEARLABELS
                  name: kubeip-config
            - name: KUBEIP_DRYRUN
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_DRYRUN
                  name: kubeip-config
            - name: KUBEIP_TICKER
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_TICKER
                  name: kubeip-config
            - name: KUBEIP_ALLNODEPOOLS
              valueFrom:
                configMapKeyRef:
                  key: KUBEIP_ALLNODEPOOLS
                  name: kubeip-config
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
          image: doitintl/kubeip:latest
          imagePullPolicy: Always
          name: kubeip
          resources:
            limits:
              cpu: 50m
              memory: 50M
            requests:
              cpu: 10m
              memory: 20M
          volumeMounts:
            - mountPath: /var/secrets/google
              name: google-cloud-key
      nodeSelector:
        cloud.google.com/gke-nodepool: default-pool
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      serviceAccountName: kubeip-sa
      volumes:
        - name: google-cloud-key
          secret:
            secretName: kubeip-key
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeip-sa
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeip-sa
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: [nodes]
    verbs: [get, list, watch, patch]
  - apiGroups: [""]
    resources: [pods]
    verbs: [get, list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeip-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeip-sa
subjects:
  - kind: ServiceAccount
    name: kubeip-sa
    namespace: kube-system
